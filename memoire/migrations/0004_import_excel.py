# Generated by Django 3.1.7 on 2021-04-19 16:57
from django.db.utils import IntegrityError

import numpy as np
import pandas
from django.db import migrations


def add_data(apps, schema_editor):
    Affiliation = apps.get_model('memoire', 'Affiliation')
    Author = apps.get_model('memoire', 'Author')
    Country = apps.get_model('memoire', 'Country')
    Journal = apps.get_model('memoire', 'Journal')
    Discipline = apps.get_model('memoire', 'Discipline')
    Reference = apps.get_model('memoire', 'Reference')

    countries = [
        'N/A',
        'AL',
        'AR',
        'AT',
        'AU',
        'AZ',
        'BA',
        'BD',
        'BE',
        'BF',
        'BG',
        'BR',
        'CA',
        'CH',
        'CL',
        'CM',
        'CN',
        'CO',
        'CU',
        'CY',
        'CZ',
        'DE',
        'DK',
        'DZ',
        'EC',
        'EG',
        'ES',
        'ET',
        'FI',
        'FR',
        'GB',
        'GH',
        'GR',
        'HK',
        'HR',
        'HU',
        'ID',
        'IE',
        'IL',
        'IN',
        'IR',
        'IT',
        'IQ',
        'JO',
        'JP',
        'KR',
        'KZ',
        'LB',
        'LK',
        'LT',
        'LU',
        'LV',
        'MA',
        'MD',
        'ME',
        'MK',
        'MM',
        'MU',
        'MX',
        'MY',
        'NG',
        'NL',
        'NO',
        'NP',
        'OM',
        'PH',
        'PS',
        'PK',
        'PL',
        'PT',
        'RO',
        'RS',
        'RU',
        'SA',
        'SE',
        'SG',
        'SI',
        'SK',
        'TH',
        'TN',
        'TR',
        'TW',
        'TT',
        'US',
        'VE',
        'XK',
        'YE',
        'ZA',
    ]

    for country in countries:
        Country.objects.get_or_create(code=country)
    data_frames = pandas.read_excel('memoire/migrations/promethee.xlsx', sheet_name=None, engine='openpyxl')
    authors = data_frames['Authors'].replace({np.nan: None})

    authors = [{
        'first_name': fn or 'N/A',
        'last_name': ln or 'N/A',
        'affiliation': aff or 'N/A',
        'country': country or 'N/A',
        'email': email or 'N/A'
    } for fn, ln, aff, country, email in zip(
        authors['1st name'],
        authors['Last name'],
        authors['Affiliation'],
        authors['Country'],
        authors['Email']
    )]

    for author in authors[:4528]:
        affiliation, _ = Affiliation.objects.get_or_create(name=author['affiliation'])
        country, _ = Country.objects.get_or_create(code=author['country'])
        try:
            Author.objects.get_or_create(**{**author, 'affiliation': affiliation, 'country': country})
        except Author.MultipleObjectsReturned:
            pass
    print('Authors finished...')
    references = data_frames['BiblioPromethee'].replace({np.nan: None})
    references = [{
        'title': title or 'N/A',
        'year': year or None,
        'journal': journal or 'N/A',
        'pages': pages or 'N/A',
        'volume': volume or 'N/A',
        'authors': _authors or 'N/A',
        'country': country or 'N/A',
        'Theory': theory == 1,
        'Practice': practice == 1,
        'Water': water == 1,
        'Energy': energy == 1,
        'Financial': financial == 1,
        'Environment': environment == 1,
        'Mining': mining == 1,
        'Industrial': industrial == 1,
        'Services/Public': services_public == 1,
        'Procurement': procurement == 1,
        'Health': health == 1,
        'Transport': transport == 1,
        'Other': other == 1
    } for
        title, year, journal, pages, volume, _authors, country, theory, practice, water, energy, financial, environment, mining, industrial, services_public, procurement, health, transport, other
        in zip(
            references['Title'],
            references['Year'],
            references['Journal or book'],
            references['Pages'],
            references['Volume'],
            references['Authors'],
            references['Country'],
            references['Theory'],
            references['Practice'],
            references['Water'],
            references['Energy'],
            references['Financial'],
            references['Environment'],
            references['Mining'],
            references['Industrial'],
            references['Services/Public'],
            references['Procurement'],
            references['Health'],
            references['Transport'],
            references['Other'],
        )]

    disciplines = [
        'Theory',
        'Practice',
        'Water',
        'Energy',
        'Financial',
        'Environment',
        'Mining',
        'Industrial',
        'Services/Public',
        'Procurement',
        'Health',
        'Transport',
        'Other',
    ]

    for discipline in disciplines:
        Discipline.objects.get_or_create(name=discipline)

    for reference in references:
        journal, _ = Journal.objects.get_or_create(name=reference['journal'])
        if Country.objects.filter(code=reference['country']).exists():  # wtf
            country = Country.objects.filter(name=reference['country']).first()
        else:
            print('JE SUIS ICI WHY ???')
            print(reference['country'])
            country = Country.objects.create(name=reference['country'])

        authors = reference['authors'].split('.,')
        del reference['authors']

        data = {
            'title': reference['title'],
            'year': reference['year'],
            'pages': reference['pages'],
            'volume': reference['volume'],
            'journal': journal,
            'country': country,
        }

        ref, _ = Reference.objects.get_or_create(**data)
        no_affiliation = Affiliation.objects.get(name='N/A')
        no_country = Country.objects.get(code='N/A')

        for author in authors:
            try:
                first_name, last_name = author.split(',')
                _as = Author.objects.filter(first_name=first_name, last_name__iexact=last_name.replace('.', ''))
                if _as.exists():
                    _a = _as.first()
                else:
                    _a = Author.objects.create(**{
                        'first_name': first_name or 'N/A',
                        'last_name': last_name or 'N/A',
                        'affiliation': no_affiliation,
                        'country': no_country,
                        'email': 'N/A'
                    })
                ref.authors.add(_a)
            except ValueError:
                print('ERROR:', author)

        if reference['Theory']:
            ref.disciplines.add(Discipline.objects.get_or_create(name='Theory')[0])
        if reference['Practice']:
            ref.disciplines.add(Discipline.objects.get_or_create(name='Practice')[0])
        if reference['Water']:
            ref.disciplines.add(Discipline.objects.get_or_create(name='Water')[0])
        if reference['Energy']:
            ref.disciplines.add(Discipline.objects.get_or_create(name='Energy')[0])
        if reference['Financial']:
            ref.disciplines.add(Discipline.objects.get_or_create(name='Financial')[0])
        if reference['Environment']:
            ref.disciplines.add(Discipline.objects.get_or_create(name='Environment')[0])
        if reference['Mining']:
            ref.disciplines.add(Discipline.objects.get_or_create(name='Mining')[0])
        if reference['Industrial']:
            ref.disciplines.add(Discipline.objects.get_or_create(name='Industrial')[0])
        if reference['Services/Public']:
            ref.disciplines.add(Discipline.objects.get_or_create(name='Services/Public')[0])
        if reference['Procurement']:
            ref.disciplines.add(Discipline.objects.get_or_create(name='Procurement')[0])
        if reference['Health']:
            ref.disciplines.add(Discipline.objects.get_or_create(name='Health')[0])
        if reference['Transport']:
            ref.disciplines.add(Discipline.objects.get_or_create(name='Transport')[0])
        if reference['Other']:
            ref.disciplines.add(Discipline.objects.get_or_create(name='Other')[0])
    print('references finished!')


class Migration(migrations.Migration):
    dependencies = [
        ('memoire', '0003_auto_20210407_1733'),
    ]

    operations = [
        migrations.RunPython(add_data, migrations.RunPython.noop),
    ]
